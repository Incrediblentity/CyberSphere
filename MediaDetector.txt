import React, { useState } from "react";
import { motion } from "framer-motion";
import { FileText, Upload, Loader2, X } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { base44 } from "@/api/base44Client";
import ScanResult from "./ScanResult";

export default function MediaDetector() {
  const [file, setFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    if (selectedFile) {
      setFile(selectedFile);
      setResult(null);
    }
  };

  const handleScan = async () => {
    if (!file) return;

    setLoading(true);
    setResult(null);

    try {
      const { file_url } = await base44.integrations.Core.UploadFile({ file });

      const analysis = await base44.integrations.Core.InvokeLLM({
        prompt: `Analyze this document/file for security threats and malicious content.
        
        Check for:
        - Malware or virus indicators
        - Phishing attempts
        - Suspicious links or content
        - Data harvesting attempts
        - Overall safety
        
        Provide:
        1. Safety score (0-100, where 100 is completely safe)
        2. Whether it's safe (true/false)
        3. Detailed analysis
        4. List of 3-5 specific recommendations`,
        file_urls: [file_url],
        response_json_schema: {
          type: "object",
          properties: {
            safety_score: { type: "number" },
            is_safe: { type: "boolean" },
            analysis: { type: "string" },
            recommendations: { type: "array", items: { type: "string" } }
          }
        }
      });

      await base44.entities.ScanRecord.create({
        scan_type: "media",
        input_data: file_url,
        safety_score: analysis.safety_score,
        is_safe: analysis.is_safe,
        analysis: analysis.analysis,
        recommendations: analysis.recommendations
      });

      setResult(analysis);
      window.dispatchEvent(new CustomEvent("scanResult", { 
        detail: analysis.is_safe ? "safe" : "malicious" 
      }));
    } catch (error) {
      console.error("Scan failed:", error);
    }

    setLoading(false);
  };

  return (
    <Card className="backdrop-blur-xl bg-white/5 border-white/10 p-8 rounded-2xl shadow-2xl">
      <div className="flex items-center gap-3 mb-6">
        <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-orange-400 to-orange-600 flex items-center justify-center shadow-lg">
          <FileText className="w-6 h-6 text-white" />
        </div>
        <div>
          <h3 className="text-2xl font-bold text-white">Media Detector</h3>
          <p className="text-white/60 text-sm">Scan documents and files for threats</p>
        </div>
      </div>

      <div className="border-2 border-dashed border-white/20 rounded-xl p-8 mb-4 hover:border-teal-400 transition-colors duration-300">
        <input
          type="file"
          id="file-upload"
          className="hidden"
          onChange={handleFileChange}
          accept=".pdf,.doc,.docx,.txt,.jpg,.jpeg,.png"
        />
        <label htmlFor="file-upload" className="cursor-pointer block text-center">
          <Upload className="w-12 h-12 text-white/40 mx-auto mb-3" />
          <p className="text-white/80 mb-1">Click to upload or drag and drop</p>
          <p className="text-white/40 text-sm">PDF, DOC, TXT, JPG, PNG (max 10MB)</p>
        </label>
      </div>

      {file && (
        <div className="flex items-center justify-between bg-white/10 rounded-lg p-3 mb-4">
          <span className="text-white text-sm truncate">{file.name}</span>
          <Button
            variant="ghost"